
import { ProjectFormValues } from "./projectFormSchema";
import { ProjectService } from "@/services/projectService";

export const createProject = async (values: ProjectFormValues) => {
  const project = await ProjectService.createProject({
    name: values.projectName,
    type: values.projectType.toLowerCase().replace(' ', '_') as any,
    description: values.projectDescription,
    client_name: "",
    start_date: values.expectedStartDate,
    target_completion: values.targetCompletionDate,
    budget_range: values.budgetRange,
    built_up_area: values.builtUpArea,
    number_of_floors: values.numberOfFloors,
    floor_height: values.floorHeight,
    site_address: values.siteAddress,
    plot_dimensions: values.plotDimensions,
    soil_type: values.soilType,
    construction_type: values.constructionType,
    foundation_type: values.foundationType,
    site_accessibility: values.siteAccessibility,
    existing_infrastructure: values.existingInfrastructure,
    architectural_style: values.architecturalStyle,
    structural_system: values.structuralSystem,
    roof_type: values.roofType,
    wall_thickness: values.wallThickness,
    column_specifications: values.columnSpecifications,
    quality_standards: values.qualityStandards,
    special_requirements: values.specialRequirements,
    sustainability_goals: values.sustainabilityGoals,
    end_use_purpose: values.endUsePurpose,
    local_building_code: values.localBuildingCode,
    permit_status: values.permitStatus,
    environmental_clearance: values.environmentalClearance,
    fire_safety_requirements: values.fireSafetyRequirements,
    accessibility_compliance: values.accessibilityCompliance,
    workforce_availability: values.workforceAvailability,
    equipment_requirements: values.equipmentRequirements,
    material_preferences: values.materialPreferences,
    timeline_constraints: values.timelineConstraints,
    budget_constraints: values.budgetConstraints,
  });

  if (!project) {
    throw new Error('Failed to create project');
  }

  await ProjectService.generateAndSaveEstimates(project.id, values);
  await ProjectService.generateSafetyChecklist(project.id, project.type);

  return project;
};

export const updateProject = async (projectId: string, values: ProjectFormValues) => {
  await ProjectService.updateProject(projectId, {
    name: values.projectName,
    type: values.projectType.toLowerCase().replace(' ', '_') as any,
    description: values.projectDescription,
    start_date: values.expectedStartDate,
    target_completion: values.targetCompletionDate,
    budget_range: values.budgetRange,
    built_up_area: values.builtUpArea,
    number_of_floors: values.numberOfFloors,
    floor_height: values.floorHeight,
    site_address: values.siteAddress,
    plot_dimensions: values.plotDimensions,
    soil_type: values.soilType,
    construction_type: values.constructionType,
    foundation_type: values.foundationType,
    site_accessibility: values.siteAccessibility,
    existing_infrastructure: values.existingInfrastructure,
    architectural_style: values.architecturalStyle,
    structural_system: values.structuralSystem,
    roof_type: values.roofType,
    wall_thickness: values.wallThickness,
    column_specifications: values.columnSpecifications,
    quality_standards: values.qualityStandards,
    special_requirements: values.specialRequirements,
    sustainability_goals: values.sustainabilityGoals,
    end_use_purpose: values.endUsePurpose,
    local_building_code: values.localBuildingCode,
    permit_status: values.permitStatus,
    environmental_clearance: values.environmentalClearance,
    fire_safety_requirements: values.fireSafetyRequirements,
    accessibility_compliance: values.accessibilityCompliance,
    workforce_availability: values.workforceAvailability,
    equipment_requirements: values.equipmentRequirements,
    material_preferences: values.materialPreferences,
    timeline_constraints: values.timelineConstraints,
    budget_constraints: values.budgetConstraints,
  });
};

export const mapProjectToFormValues = (project: any): Partial<ProjectFormValues> => ({
  projectName: project.name || "",
  projectType: project.type ? project.type.charAt(0).toUpperCase() + project.type.slice(1) : "Residential",
  projectDescription: project.description || "",
  expectedStartDate: project.start_date || "",
  targetCompletionDate: project.target_completion || "",
  siteAddress: project.site_address || "",
  plotDimensions: project.plot_dimensions || 0,
  soilType: project.soil_type || "",
  siteAccessibility: project.site_accessibility || "",
  existingInfrastructure: project.existing_infrastructure || [],
  builtUpArea: project.built_up_area || 1000,
  numberOfFloors: project.number_of_floors || 1,
  floorHeight: project.floor_height || 10,
  constructionType: project.construction_type || "RCC Frame Structure",
  architecturalStyle: project.architectural_style || "",
  foundationType: project.foundation_type || "Isolated Footing",
  structuralSystem: project.structural_system || "",
  roofType: project.roof_type || "",
  wallThickness: project.wall_thickness || 9,
  columnSpecifications: project.column_specifications || "12x18 RCC columns, Grade of concrete M25",
  budgetRange: project.budget_range || 0,
  qualityStandards: project.quality_standards || "",
  specialRequirements: project.special_requirements || "",
  sustainabilityGoals: project.sustainability_goals || [],
  endUsePurpose: project.end_use_purpose || "",
  localBuildingCode: project.local_building_code || "",
  permitStatus: project.permit_status || "",
  environmentalClearance: project.environmental_clearance || false,
  fireSafetyRequirements: project.fire_safety_requirements || [],
  accessibilityCompliance: project.accessibility_compliance || false,
  workforceAvailability: project.workforce_availability || "",
  equipmentRequirements: project.equipment_requirements || [],
  materialPreferences: project.material_preferences || "",
  timelineConstraints: project.timeline_constraints || 0,
  budgetConstraints: project.budget_constraints || 0,
  // Add default values for new fields (since they won't exist in existing projects)
  soilBearingCapacity: 200,
  waterTableLevel: 0,
  siteAccess: "Good",
  existingUtilities: [],
  climateZone: "Moderate",
  seismicZone: "Zone II",
  externalWallThickness: 230,
  internalWallThickness: 115,
  floorToFloorHeight: 3000,
  structuralGradeConcrete: "M20",
  steelGrade: "Fe415",
  fireNOCRequired: false,
  seismicDesignRequired: true,
  accessibilityFeatures: false,
  siteSafetyLevel: "Standard",
  totalElectricalLoad: 0,
  numberOfLightPoints: 0,
  numberOfPowerPoints: 0,
  acType: "",
  totalACTonnage: 0,
  numberOfBathrooms: 0,
  numberOfKitchens: 0,
  waterTankCapacity: 1000,
  fireSafetyRequired: false,
  constructionQualityGrade: "Standard",
  brickType: "Common Burnt Clay",
  cementType: "OPC 43",
  tileQuality: "",
  paintType: "",
  windowMaterial: "UPVC",
  sanitaryWareQuality: "",
  concreteTestingFrequency: "Standard",
  steelTestingRequired: true,
  thirdPartyInspection: false,
  qualityAssuranceLevel: "Standard",
  projectLocationState: "Karnataka",
  projectLocationCity: "Bangalore",
  distanceFromSupplierHub: 50,
  localLaborAvailability: "",
  monsoonImpact: "Moderate",
  bimIntegrationRequired: false,
  erpIntegration: false,
  realTimePricingRequired: true,
  automatedProcurement: false,
  preferredSuppliers: [],
  bulkPurchasePreference: true,
  deliveryTimeline: "Standard",
  paymentTermsPreference: "",
  greenBuildingCertification: "",
  sustainableMaterialsPreference: false,
  carbonFootprintTracking: false,
  wasteManagementPlan: false,
});
